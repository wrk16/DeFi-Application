package com.defi.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.RawTransaction;
import org.web3j.crypto.TransactionEncoder;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.response.*;
import org.web3j.protocol.exceptions.JsonRpcError;
import org.web3j.tx.gas.DefaultGasProvider;
import org.web3j.utils.Convert;
import org.web3j.utils.Numeric;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;

@Service
public class BlockchainService {
    
    @Autowired
    private Web3j web3j;
    
    // Sepolia testnet chain ID
    private static final long CHAIN_ID = 11155111L;
    
    public long getLatestBlockNumber() {
        try {
            EthBlockNumber blockNumber = web3j.ethBlockNumber().send();
            return blockNumber.getBlockNumber().longValue();
        } catch (IOException e) {
            throw new RuntimeException("Failed to fetch block number", e);
        }
    }
    
    /**
     * Get Ethereum balance of a user.
     */
    public BigDecimal getEthereumBalance(String walletAddress) throws Exception {
        BigInteger balanceInWei = web3j.ethGetBalance(walletAddress, DefaultBlockParameterName.LATEST)
                .send()
                .getBalance();
        return Convert.fromWei(new BigDecimal(balanceInWei), Convert.Unit.ETHER);
    }
    
    /**
     * Send Ethereum from one wallet to another with proper validation and transaction tracking.
     */
    public String sendEthereum(String senderPrivateKey, String receiverWallet, BigDecimal amount) throws Exception {
        // Validate inputs
        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("Amount must be greater than zero");
        }
        
        // Validate wallet address format
        if (!receiverWallet.matches("^0x[a-fA-F0-9]{40}$")) {
            throw new IllegalArgumentException("Invalid receiver wallet address format");
        }
        
        Credentials credentials = Credentials.create(senderPrivateKey);
        String senderAddress = credentials.getAddress();
        
        System.out.println("Sender address: " + senderAddress);
        System.out.println("Receiver address: " + receiverWallet);
        System.out.println("Amount to send: " + amount + " ETH");
        
        // Check sender balance before transaction
        BigDecimal senderBalance = getEthereumBalance(senderAddress);
        System.out.println("Sender balance before transaction: " + senderBalance + " ETH");
        
        if (senderBalance.compareTo(amount) < 0) {
            throw new RuntimeException("Insufficient balance. Required: " + amount + " ETH, Available: " + senderBalance + " ETH");
        }
        
        // Fetch sender's nonce
        EthGetTransactionCount ethGetTransactionCount = web3j.ethGetTransactionCount(
                senderAddress, DefaultBlockParameterName.LATEST).send();
        BigInteger nonce = ethGetTransactionCount.getTransactionCount();
        
        System.out.println("Transaction nonce: " + nonce);
        
        // Convert ETH amount to Wei
        BigInteger value = Convert.toWei(amount, Convert.Unit.ETHER).toBigInteger();
        
        // Get current gas price
        BigInteger gasPrice = web3j.ethGasPrice().send().getGasPrice();
        
        // Use a more reasonable gas limit for simple ETH transfer (21000 is standard)
        BigInteger gasLimit = BigInteger.valueOf(21000);
        
        // Calculate total cost (amount + gas fees)
        BigInteger gasCost = gasPrice.multiply(gasLimit);
        BigDecimal gasCostInEth = Convert.fromWei(new BigDecimal(gasCost), Convert.Unit.ETHER);
        BigDecimal totalCost = amount.add(gasCostInEth);
        
        System.out.println("Gas price: " + gasPrice + " wei");
        System.out.println("Gas limit: " + gasLimit);
        System.out.println("Gas cost: " + gasCostInEth + " ETH");
        System.out.println("Total cost (amount + gas): " + totalCost + " ETH");
        
        if (senderBalance.compareTo(totalCost) < 0) {
            throw new RuntimeException("Insufficient balance for transaction + gas fees. Required: " + totalCost + " ETH, Available: " + senderBalance + " ETH");
        }
        
        // Create raw transaction
        RawTransaction rawTransaction = RawTransaction.createEtherTransaction(
                nonce, gasPrice, gasLimit, receiverWallet, value);
        
        // Sign the transaction with chain ID
        byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, CHAIN_ID, credentials);
        String hexValue = Numeric.toHexString(signedMessage);
        
        System.out.println("Signed transaction: " + hexValue);
        
        // Send the transaction
        EthSendTransaction ethSendTransaction = web3j.ethSendRawTransaction(hexValue).send();
        
        if (ethSendTransaction.hasError()) {
            throw new RuntimeException("Transaction Error: " + ethSendTransaction.getError().getMessage());
        }
        
        String transactionHash = ethSendTransaction.getTransactionHash();
        System.out.println("Transaction sent with hash: " + transactionHash);
        
        // Wait for transaction confirmation (optional but recommended)
        waitForTransactionConfirmation(transactionHash, 5); // Wait up to 5 minutes
        
        return transactionHash;
    }
    
    /**
     * Wait for transaction confirmation
     */
    private void waitForTransactionConfirmation(String transactionHash, int timeoutMinutes) {
        System.out.println("Waiting for transaction confirmation...");
        
        long startTime = System.currentTimeMillis();
        long timeout = timeoutMinutes * 60 * 1000; // Convert to milliseconds
        
        try {
            while (System.currentTimeMillis() - startTime < timeout) {
                EthGetTransactionReceipt receipt = web3j.ethGetTransactionReceipt(transactionHash).send();
                
                if (receipt.getTransactionReceipt().isPresent()) {
                    TransactionReceipt transactionReceipt = receipt.getTransactionReceipt().get();
                    System.out.println("Transaction confirmed!");
                    System.out.println("Block number: " + transactionReceipt.getBlockNumber());
                    System.out.println("Gas used: " + transactionReceipt.getGasUsed());
                    System.out.println("Status: " + (transactionReceipt.getStatus().equals("0x1") ? "SUCCESS" : "FAILED"));
                    
                    if (!transactionReceipt.getStatus().equals("0x1")) {
                        throw new RuntimeException("Transaction failed on blockchain");
                    }
                    return;
                }
                
                Thread.sleep(5000); // Wait 5 seconds before checking again
            }
            
            System.out.println("Transaction confirmation timeout - check manually: " + transactionHash);
        } catch (Exception e) {
            System.out.println("Error waiting for confirmation: " + e.getMessage());
        }
    }
    
    /**
     * Get transaction details
     */
    public TransactionReceipt getTransactionReceipt(String transactionHash) throws Exception {
        EthGetTransactionReceipt receipt = web3j.ethGetTransactionReceipt(transactionHash).send();
        
        if (receipt.getTransactionReceipt().isPresent()) {
            return receipt.getTransactionReceipt().get();
        } else {
            throw new RuntimeException("Transaction not found or not yet mined: " + transactionHash);
        }
    }
}