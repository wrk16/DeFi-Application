package com.defi.controller;

import com.defi.entity.Loan;
import com.defi.entity.User;
import com.defi.repository.LoanRepository;
import com.defi.service.LoanService;
import com.defi.service.UserService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.NoSuchElementException;

@Controller
public class WebController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private LoanService loanService;

    @Autowired
    private LoanRepository loanRepository;

    @GetMapping("/")
    public String home() {
        return "index";
    }
    
    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "register";
    }
    
    @PostMapping("/register")
    public String registerUser(@ModelAttribute User user, Model model) {
        try {
            User registeredUser = userService.registerUser(user.getName(), user.getEmail(), user.getPassword());
            model.addAttribute("success", "Registration successful! Your wallet address: " + registeredUser.getWalletAddress());
            return "register-success";
        } catch (Exception e) {
            model.addAttribute("error", "Registration failed: " + e.getMessage());
            return "register";
        }
    }
    
    @GetMapping("/loans")
    public String showLoans(Model model) {
        List<Loan> availableLoans = loanService.getAvailableLoans();
        model.addAttribute("loans", availableLoans);
        return "loans";
    }
    
    @GetMapping("/loan/request")
    public String showLoanRequestForm(Model model) {
        model.addAttribute("users", userService.getAll());
        return "loan-request";
    }
    
    @PostMapping("/loan/request")
    public String requestLoan(@RequestParam String borrowerEmail,
                              @RequestParam BigDecimal loanAmount,
                              @RequestParam BigDecimal collateralEth,
                              @RequestParam int durationDays,
                              Model model) {
        try {
            Loan loan = loanService.requestLoan(borrowerEmail, loanAmount, collateralEth, durationDays);
            model.addAttribute("success", "Loan request submitted successfully. Loan ID: " + loan.getId());
            return "redirect:/loans";
        } catch (Exception e) {
            model.addAttribute("error", "Failed to request loan: " + e.getMessage());
            model.addAttribute("users", userService.getAll());
            return "loan-request";
        }
    }
    
    @GetMapping("/loan/accept/{id}")
    public String showLoanAcceptForm(@PathVariable Long id, Model model) {
        model.addAttribute("loanId", id);
        model.addAttribute("users", userService.getAll());
        return "loan-accept";
    }
    
    @PostMapping("/loan/accept")
    public String acceptLoan(@RequestParam Long loanId,
                             @RequestParam String lenderEmail,
                             Model model) {
        try {
            loanService.acceptLoan(lenderEmail, loanId);
            model.addAttribute("success", "Loan accepted successfully");
            return "redirect:/loans";
        } catch (Exception e) {
            model.addAttribute("error", "Failed to accept loan: " + e.getMessage());
            model.addAttribute("loanId", loanId);
            model.addAttribute("users", userService.getAll());
            return "loan-accept";
        }
    }
    
    @GetMapping("/loan/repay/{id}")
    public String showLoanRepayForm(@PathVariable Long id, Model model) {
        model.addAttribute("loanId", id);
        return "loan-repay-form";
    }

    @GetMapping("/loan/repay")
    public String showLoanRepayForm( Model model) {
        return "loan-repay-form";
    }
    
    @PostMapping("/loan/repay")
    public String repayLoan(@RequestParam Long loanId, Model model) {
        try {
            loanService.repayLoan(loanId);
            model.addAttribute("success", "Loan repaid successfully");
            return "redirect:/loans";
        } catch (Exception e) {
            model.addAttribute("error", "Failed to repay loan: " + e.getMessage());
            model.addAttribute("loanId", loanId);
            return "loan-repay";
        }
    }

}