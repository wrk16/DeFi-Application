package com.defi.service;

import com.defi.entity.User;
import com.defi.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.ECKeyPair;
import org.web3j.crypto.Keys;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;

import java.io.File;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.List;
import java.util.Optional;
@Service
public class UserService {

    private static final String INFURA_URL = "https://sepolia.infura.io/v3/55d33ba38a934e72901c512d26818416";
    private static final String WALLET_DIRECTORY = "wallets/"; // Folder to store user wallets
    private static final String WALLET_PASSWORD = "user-secure-password"; // Change for security
    private static final String FUNDER_PRIVATE_KEY = "YOUR_FUNDER_PRIVATE_KEY"; // Account to fund new users

    private final Web3j web3j = Web3j.build(new HttpService(INFURA_URL));

    @Autowired
    private UserRepository userRepository;

    public User registerUser(String name, String email, String password) throws Exception {
        // 1. Generate a new Ethereum wallet
        SecureRandom random = new SecureRandom();
        ECKeyPair keyPair = Keys.createEcKeyPair(random);
        Credentials credentials = Credentials.create(keyPair);
        String walletAddress = credentials.getAddress();
        String privateKey = String.format("%064x", keyPair.getPrivateKey()); // Store this securely

        // Save user with wallet address & private key
        User user = new User(name, email, password, walletAddress, privateKey,BigDecimal.valueOf(10000));
        userRepository.save(user);

        // Fund wallet with ETH
        fundWallet(walletAddress);

        System.out.println("User registered: " + name + " | Wallet: " + walletAddress);
        return user;
    }

    public void addStableMoney( String email, BigDecimal money){
        User user= userRepository.findByEmail(email).get();
        user.deposit(money);
    }

    private void fundWallet(String recipientAddress) throws Exception {
        Credentials credentials = Credentials.create(FUNDER_PRIVATE_KEY);
        BigDecimal amount = Convert.toWei("5.0", Convert.Unit.ETHER); // Fund with 0.1 ETH

        TransactionReceipt receipt = Transfer.sendFunds(web3j, credentials, recipientAddress, amount, Convert.Unit.WEI).send();
        System.out.println("Funded Wallet: " + recipientAddress + " | TX Hash: " + receipt.getTransactionHash());
    }

    public BigDecimal getUserBalance(String walletAddress) throws Exception {
        BigInteger balanceInWei = web3j.ethGetBalance(walletAddress, DefaultBlockParameterName.LATEST)
                .send()
                .getBalance();
        return Convert.fromWei(new BigDecimal(balanceInWei), Convert.Unit.ETHER);
    }


    public Optional<User> getUserByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    public List<User> getAll() {
        return userRepository.findAll();
    }
}